/* 021c1f75869057fdb876bd8231ab25e671f7b21d
 * This file is automatically generated by graphql-let. */

import { GraphQLResolveInfo } from "graphql";
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type RequireFields<T, K extends keyof T> = { [X in Exclude<keyof T, K>]?: T[X] } &
  { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: "Query";
  viewer?: Maybe<User>;
  game?: Maybe<Game>;
};

export type QueryGameArgs = {
  id: Scalars["ID"];
};

export type Mutation = {
  __typename?: "Mutation";
  createGame: Game;
  joinGame: Game;
  endGame: Game;
};

export type MutationCreateGameArgs = {
  input: NewGameInput;
};

export type MutationJoinGameArgs = {
  id: Scalars["ID"];
};

export type MutationEndGameArgs = {
  id: Scalars["ID"];
};

export type User = {
  __typename?: "User";
  id: Scalars["ID"];
  name: Scalars["String"];
  picture?: Maybe<Scalars["String"]>;
};

export type NewGameInput = {
  name: Scalars["String"];
  lastRoundNumber: Scalars["Int"];
};

export type Game = {
  __typename?: "Game";
  id: Scalars["ID"];
  name: Scalars["String"];
  lastRoundNumber: Scalars["Int"];
  players: Array<User>;
  status: Status;
  phase: Phase;
  round: Round;
};

export type Round = {
  __typename?: "Round";
  id: Scalars["ID"];
  number: Scalars["Int"];
  hands: Array<Hand>;
  cards: Array<Scalars["Int"]>;
};

export type Hand = {
  __typename?: "Hand";
  id: Scalars["ID"];
  playerID: Scalars["ID"];
  roundID: Scalars["ID"];
  cards: Array<Scalars["Int"]>;
};

export enum Status {
  Ready = "READY",
  Playing = "PLAYING",
  Victory = "VICTORY",
  Fail = "FAIL",
}

export enum Phase {
  Preparation = "PREPARATION",
  Playing = "PLAYING",
  Finished = "FINISHED",
}

export type ResolverTypeWrapper<T> = Promise<T> | T;

export type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
  selectionSet: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type StitchingResolver<TResult, TParent, TContext, TArgs> =
  | LegacyStitchingResolver<TResult, TParent, TContext, TArgs>
  | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | StitchingResolver<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (
  obj: T,
  context: TContext,
  info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  Query: ResolverTypeWrapper<{}>;
  ID: ResolverTypeWrapper<Scalars["ID"]>;
  Mutation: ResolverTypeWrapper<{}>;
  User: ResolverTypeWrapper<User>;
  String: ResolverTypeWrapper<Scalars["String"]>;
  NewGameInput: NewGameInput;
  Int: ResolverTypeWrapper<Scalars["Int"]>;
  Game: ResolverTypeWrapper<Game>;
  Round: ResolverTypeWrapper<Round>;
  Hand: ResolverTypeWrapper<Hand>;
  Status: Status;
  Phase: Phase;
  Boolean: ResolverTypeWrapper<Scalars["Boolean"]>;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  Query: {};
  ID: Scalars["ID"];
  Mutation: {};
  User: User;
  String: Scalars["String"];
  NewGameInput: NewGameInput;
  Int: Scalars["Int"];
  Game: Game;
  Round: Round;
  Hand: Hand;
  Boolean: Scalars["Boolean"];
};

export type QueryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Query"] = ResolversParentTypes["Query"]
> = {
  viewer?: Resolver<Maybe<ResolversTypes["User"]>, ParentType, ContextType>;
  game?: Resolver<Maybe<ResolversTypes["Game"]>, ParentType, ContextType, RequireFields<QueryGameArgs, "id">>;
};

export type MutationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Mutation"] = ResolversParentTypes["Mutation"]
> = {
  createGame?: Resolver<
    ResolversTypes["Game"],
    ParentType,
    ContextType,
    RequireFields<MutationCreateGameArgs, "input">
  >;
  joinGame?: Resolver<ResolversTypes["Game"], ParentType, ContextType, RequireFields<MutationJoinGameArgs, "id">>;
  endGame?: Resolver<ResolversTypes["Game"], ParentType, ContextType, RequireFields<MutationEndGameArgs, "id">>;
};

export type UserResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["User"] = ResolversParentTypes["User"]
> = {
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  name?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  picture?: Resolver<Maybe<ResolversTypes["String"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type GameResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Game"] = ResolversParentTypes["Game"]
> = {
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  name?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
  lastRoundNumber?: Resolver<ResolversTypes["Int"], ParentType, ContextType>;
  players?: Resolver<Array<ResolversTypes["User"]>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes["Status"], ParentType, ContextType>;
  phase?: Resolver<ResolversTypes["Phase"], ParentType, ContextType>;
  round?: Resolver<ResolversTypes["Round"], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type RoundResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Round"] = ResolversParentTypes["Round"]
> = {
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  number?: Resolver<ResolversTypes["Int"], ParentType, ContextType>;
  hands?: Resolver<Array<ResolversTypes["Hand"]>, ParentType, ContextType>;
  cards?: Resolver<Array<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type HandResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes["Hand"] = ResolversParentTypes["Hand"]
> = {
  id?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  playerID?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  roundID?: Resolver<ResolversTypes["ID"], ParentType, ContextType>;
  cards?: Resolver<Array<ResolversTypes["Int"]>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Resolvers<ContextType = any> = {
  Query?: QueryResolvers<ContextType>;
  Mutation?: MutationResolvers<ContextType>;
  User?: UserResolvers<ContextType>;
  Game?: GameResolvers<ContextType>;
  Round?: RoundResolvers<ContextType>;
  Hand?: HandResolvers<ContextType>;
};

/**
 * @deprecated
 * Use "Resolvers" root object instead. If you wish to get "IResolvers", add "typesPrefix: I" to your config.
 */
export type IResolvers<ContextType = any> = Resolvers<ContextType>;
