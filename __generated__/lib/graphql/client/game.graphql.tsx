/* 6f34f99f98bc56a79200fbc763e141a63ccf0e36
 * This file is automatically generated by graphql-let. */

import * as Apollo from "@apollo/client";
import { gql } from "@apollo/client";
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  __typename?: "Query";
  viewer?: Maybe<User>;
  game?: Maybe<Game>;
};

export type QueryGameArgs = {
  id: Scalars["ID"];
};

export type Mutation = {
  __typename?: "Mutation";
  createGame: Game;
  joinGame: Game;
  endGame: Game;
};

export type MutationCreateGameArgs = {
  input: NewGameInput;
};

export type MutationJoinGameArgs = {
  id: Scalars["ID"];
};

export type MutationEndGameArgs = {
  id: Scalars["ID"];
};

export type User = {
  __typename?: "User";
  id: Scalars["ID"];
  name: Scalars["String"];
  picture?: Maybe<Scalars["String"]>;
};

export type NewGameInput = {
  name: Scalars["String"];
  lastRoundNumber: Scalars["Int"];
};

export type Game = {
  __typename?: "Game";
  id: Scalars["ID"];
  name: Scalars["String"];
  lastRoundNumber: Scalars["Int"];
  players: Array<User>;
  status: Status;
  phase: Phase;
  round: Round;
};

export type Round = {
  __typename?: "Round";
  id: Scalars["ID"];
  number: Scalars["Int"];
  hands: Array<Hand>;
  cards: Array<Scalars["Int"]>;
};

export type Hand = {
  __typename?: "Hand";
  id: Scalars["ID"];
  playerID: Scalars["ID"];
  roundID: Scalars["ID"];
  cards: Array<Scalars["Int"]>;
};

export enum Status {
  Ready = "READY",
  Playing = "PLAYING",
  Victory = "VICTORY",
  Fail = "FAIL",
}

export enum Phase {
  Preparation = "PREPARATION",
  Playing = "PLAYING",
  Finished = "FINISHED",
}

export type GameQueryVariables = Exact<{
  id: Scalars["ID"];
}>;

export type GameQuery = { __typename?: "Query" } & { game?: Maybe<{ __typename?: "Game" } & GameFragment> };

export type GameFragment = { __typename?: "Game" } & Pick<
  Game,
  "id" | "lastRoundNumber" | "name" | "phase" | "status"
> & { round: { __typename?: "Round" } & RoundFragment; players: Array<{ __typename?: "User" } & PartialFragment> };

export type RoundFragment = { __typename?: "Round" } & Pick<Round, "id" | "cards"> & {
    hands: Array<{ __typename?: "Hand" } & HandFragment>;
  };

export type HandFragment = { __typename?: "Hand" } & Pick<Hand, "id" | "playerID" | "roundID" | "cards">;

export type PartialFragment = { __typename?: "User" } & Pick<User, "id" | "name" | "picture">;

export const HandFragmentDoc = gql`
  fragment Hand on Hand {
    id
    playerID
    roundID
    cards
  }
`;
export const RoundFragmentDoc = gql`
  fragment Round on Round {
    id
    cards
    hands {
      ...Hand
    }
  }
  ${HandFragmentDoc}
`;
export const PartialFragmentDoc = gql`
  fragment Partial on User {
    id
    name
    picture
  }
`;
export const GameFragmentDoc = gql`
  fragment Game on Game {
    id
    lastRoundNumber
    name
    phase
    status
    round {
      ...Round
    }
    players {
      ...Partial
    }
  }
  ${RoundFragmentDoc}
  ${PartialFragmentDoc}
`;
export const GameDocument = gql`
  query Game($id: ID!) {
    game(id: $id) {
      ...Game
    }
  }
  ${GameFragmentDoc}
`;

/**
 * __useGameQuery__
 *
 * To run a query within a React component, call `useGameQuery` and pass it any options that fit your needs.
 * When your component renders, `useGameQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGameQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGameQuery(baseOptions: Apollo.QueryHookOptions<GameQuery, GameQueryVariables>) {
  return Apollo.useQuery<GameQuery, GameQueryVariables>(GameDocument, baseOptions);
}
export function useGameLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GameQuery, GameQueryVariables>) {
  return Apollo.useLazyQuery<GameQuery, GameQueryVariables>(GameDocument, baseOptions);
}
export type GameQueryHookResult = ReturnType<typeof useGameQuery>;
export type GameLazyQueryHookResult = ReturnType<typeof useGameLazyQuery>;
export type GameQueryResult = Apollo.QueryResult<GameQuery, GameQueryVariables>;
